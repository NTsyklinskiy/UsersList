{"version":3,"sources":["utils/apollo-client.js","store/auth.js","store/store.js","config.js","utils/graphql.js","hooks/useForm.js","pages/Auth/SignUp.js","pages/Auth/SignIn.js","pages/AuthLayout.js","components/Checkbox.js","components/Table.js","hooks/useCheckbox.js","pages/AppLayout.js","App.js","index.js"],"names":["createAuthLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","then","oper","token","localStorage","getItem","setContext","headers","authorization","request","subscribe","next","bind","error","complete","catch","unsubscribe","SET_AUTH_USER","CLEAR_AUTH_USER","authInitialState","user","authReducer","state","action","type","payload","StoreContext","createContext","store","auth","reducers","StoreProvider","children","Provider","value","useReducer","useStore","useContext","endpoint","document","location","href","startsWith","GET_ALL_USERS","gql","GET_AUTH_USER","SIGN_IN","SIGN_UP","LOG_OUT","DELETE_USERS","BLOCK_USERS","UNBLOCK_USERS","useForm","initial","useState","inputs","setInputs","initialValue","Object","values","join","handleChange","e","target","name","parseInt","files","useEffect","withRouter","history","refetch","setError","email","password","useMutation","signup","handleSubmit","loading","a","preventDefault","variables","userInput","refetchQueries","query","response","setItem","data","push","graphQLErrors","message","Form","onSubmit","Group","Label","Control","placeholder","onChange","controlId","Button","variant","signin","pathname","handleSubmitSignIn","AuthLayout","Container","Row","className","Checkbox","checked","conversionDate","date","Date","toString","split","keyId","checkeds","keys","fromEntries","entries","filter","TableUsers","refetchUser","refetchAllUsers","id","console","log","users","setUsers","setChecked","handler","boolean","change","map","key","handleChangeAll","handleChangeNo","assign","i","useCheckbox","deleteUsers","blockUsers","unBlockUsers","handlerBlock","blockId","usersIds","handlerUnBlock","unBlockId","handlerDelete","deleteId","some","window","removeItem","handlerRefetch","ButtonGroup","onClick","Table","striped","bordered","hover","size","u","createdAt","lastLoginAt","isOnline","active","authUser","dispatch","useQuery","allUsers","userId","logout","handlerLogOut","loadingAllUsers","App","getAuthUser","exact","render","apolloClient","apiUrl","websocketApiUrl","cache","InMemoryCache","errorLink","onError","networkError","locations","path","authLink","uploadLink","createUploadLink","uri","authToken","wsLink","WebSocketLink","options","timeout","reconnect","connectionParams","subscriptionClient","maxConnectTimeGenerator","duration","max","terminatingLink","getMainDefinition","kind","ApolloClient","link","from","createApolloClient","replace","ApolloProvider","client","getElementById"],"mappings":"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","file":"static/js/main.9a810326.chunk.js","sourcesContent":["import { ApolloClient, ApolloLink, Observable, split, InMemoryCache } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { onError } from '@apollo/client/link/error';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { createUploadLink } from 'apollo-upload-client';\n\n\nconst createAuthLink = () => {\n  const request = (operation, forward) => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token,\n      },\n    });\n  };\n\n  return new ApolloLink(\n    (operation, forward) =>\n      new Observable((observer) => {\n        let handle;\n        Promise.resolve(operation)\n          .then((oper) => request(oper))\n          .then(() => {\n            handle = forward(operation).subscribe({\n              next: observer.next.bind(observer),\n              error: observer.error.bind(observer),\n              complete: observer.complete.bind(observer),\n            });\n          })\n          .catch(observer.error.bind(observer));\n\n        return () => {\n          if (handle) handle.unsubscribe();\n        };\n      })\n  );\n};\n\nconst handleErrors = () => {\n  return onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors) {\n      graphQLErrors.map(({ message, locations, path }) =>\n        console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`)\n      );\n    }\n\n    if (networkError) {\n      console.log(`[Network error]: ${networkError}`);\n    }\n  });\n};\n\nexport const createApolloClient = (apiUrl, websocketApiUrl) => {\n  const cache = new InMemoryCache();\n\n  const errorLink = handleErrors();\n  const authLink = createAuthLink();\n  const uploadLink = createUploadLink({ uri: apiUrl });\n\n  const authToken = localStorage.getItem('token');\n  const wsLink = new WebSocketLink({\n    uri: websocketApiUrl,\n    options: {\n      timeout: 60000,\n      reconnect: true,\n      connectionParams: {\n        authorization: authToken,\n      },\n    },\n  });\n\n  wsLink.subscriptionClient.maxConnectTimeGenerator.duration = () =>\n    wsLink.subscriptionClient.maxConnectTimeGenerator.max;\n\n  const terminatingLink = split(\n    ({ query }) => {\n      const { kind, operation } = getMainDefinition(query);\n      return kind === 'OperationDefinition' && operation === 'subscription';\n    },\n    wsLink,\n    uploadLink\n  );\n\n  return new ApolloClient({\n    link: ApolloLink.from([errorLink, authLink, terminatingLink]),\n    cache,\n  });\n};","export const SET_AUTH_USER = 'SET_AUTH_USER';\nexport const CLEAR_AUTH_USER = 'CLEAR_AUTH_USER';\n\nexport const authInitialState = {\n  user: null,\n};\n\nexport const authReducer = (state = authInitialState, action) => {\n  switch (action.type) {\n    case SET_AUTH_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n    case CLEAR_AUTH_USER: {\n      return {\n        ...state,\n        ...authInitialState,\n      };\n    }\n\n    default:\n      return state;\n  }\n};","import React, { createContext, useContext, useReducer } from 'react';\nimport { authReducer, authInitialState } from './auth';\n\nconst StoreContext = createContext();\n\nconst store = {\n  auth: authInitialState,\n};\n\nconst reducers = (store, action) => ({\n  auth: authReducer(store.auth, action),\n});\n\nexport const StoreProvider = ({ children }) => (\n  <StoreContext.Provider value={useReducer(reducers, store)}>{children}</StoreContext.Provider>\n);\n\nexport const useStore = () => useContext(StoreContext);","export const endpoint = document.location.href.startsWith('http://localhost') ?`http://localhost:4000/graphql` : '';\n","import { gql } from '@apollo/client';\n\n\nexport const GET_ALL_USERS = gql`\nquery { \n  allUsers {\n    id\n    name\n    email\n    password\n    isOnline\n    lastLoginAt\n    createdAt\n    active\n  }\n}\n`;\n\nexport const GET_AUTH_USER = gql`\n  query {\n    getAuthUser {\n      id\n      name\n      email\n      createdAt\n      lastLoginAt\n      isOnline\n      }\n    }\n`;\n\nexport const SIGN_IN = gql`\n    mutation SIGNIN($email: String!,$password: String! ){\n      signin(email:$email, password: $password){\n        token\n      }\n    }\n`;\n\nexport const SIGN_UP = gql`\n    mutation SIGNUP($userInput: UserInputData ){\n      signup(userInput: $userInput){\n        token\n      }\n    }\n`;\n\nexport const LOG_OUT = gql`\n  mutation LOG_OUT($userId: String!){\n    logout(userId: $userId){\n      boolean\n    }\n  }\n`;\n\nexport const DELETE_USERS = gql`\n  mutation DELETE_USERS($usersIds: [ID!]!){\n    deleteUsers(usersIds: $usersIds){\n      count\n    }\n  }\n`;\n\nexport const BLOCK_USERS = gql`\n  mutation BLOCK_USERS($usersIds: [ID!]!){\n    blockUsers(usersIds: $usersIds){\n      count\n    }\n  }\n`;\n\nexport const UNBLOCK_USERS = gql`\n  mutation UNBLOCK_USERS($usersIds: [ID!]!) {\n    unBlockUsers(usersIds: $usersIds){\n      count\n    }\n  }\n  `;\n","import { useEffect, useState } from \"react\";\n\nexport default function useForm(initial = {}) {\n  const [inputs, setInputs] = useState(initial);\n  const initialValue = Object.values(initial).join('');\n  \n  useEffect(() => {\n    setInputs(initial)\n  }, [initialValue])\n\n  function handleChange(e) {\n    let {value, name, type} = e.target\n    if(type === 'number') {\n      value = parseInt(value)\n    }\n    if(type === 'file') {\n      [value] = e.target.files\n    }\n    setInputs({ \n      ...inputs,\n      [name]: value\n    })\n  }\n  \n  \n  return {\n    inputs,\n    handleChange,\n  }\n}","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { Button,  Form, Row } from 'react-bootstrap'\nimport PropTypes from 'prop-types';\n\nimport { GET_ALL_USERS, SIGN_UP } from '../../utils/graphql';\nimport useForm from '../../hooks/useForm';\n\nconst SignUp = ({ history, refetch }) => {\n    const [error, setError] = useState('');\n    const {inputs, handleChange} = useForm({\n      email: '',\n      name: '',\n      password: ''\n    })\n\n  const [signup, { loading }] = useMutation(SIGN_UP);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      const response = await signup({\n        variables:  {\n          userInput: inputs,\n      },    \n      refetchQueries: [{query: GET_ALL_USERS}]\n      });\n      localStorage.setItem('token', response.data.signup.token);\n      await refetch();\n      history.push('/');\n    } catch (error) {\n      setError(error.graphQLErrors[0].message);\n    }\n  };\n\n\n  return (\n    <>\n            <Form onSubmit={handleSubmit}>\n              <Form.Group>\n              <Form.Label>E-Mail</Form.Label>\n                <Form.Control name=\"email\" type=\"text\" value={inputs.email} placeholder=\"email\" onChange={handleChange} />\n              </Form.Group>\n              <Form.Group>\n              <Form.Label>Name</Form.Label>\n                <Form.Control name=\"name\" type=\"text\" value={inputs.name} placeholder=\"name\" onChange={handleChange} />\n              </Form.Group>\n              <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Password</Form.Label>\n                <Form.Control type=\"password\" name=\"password\" value={inputs.password} placeholder=\"Пароль\" onChange={handleChange}/>\n              </Form.Group>\n              <Button variant=\"primary\" type=\"submit\">\n                Sign Up\n              </Button>\n            </Form>\n        \n    </>\n  );\n};\n\nSignUp.propTypes = {\n  history: PropTypes.object.isRequired,\n  refetch: PropTypes.func.isRequired,\n};\n\nexport default withRouter(SignUp);","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter, Redirect, Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { GET_ALL_USERS, SIGN_IN } from '../../utils/graphql';\nimport useForm from '../../hooks/useForm';\nimport { Button, Form} from 'react-bootstrap';\n\n\nconst SignIn = ({ history, location, refetch }) => {\n  const {inputs, handleChange} = useForm({\n    email: '',\n    password: ''\n  });\n  const [error, setError] = useState('');\n  const [signin, { loading }] = useMutation(SIGN_IN);\n\n\n  useEffect(() => {\n    setError('');\n  }, [location.pathname]);\n\n\n  const handleSubmitSignIn = async (e) => {\n    e.preventDefault();\n\n    try {\n      const response = await signin({\n        variables: {  email, password  },\n        refetchQueries: [{query: GET_ALL_USERS}]\n      });\n      localStorage.setItem('token', response.data.signin.token);\n      await refetch();\n      history.push('/');\n    } catch (error) {\n      setError(error.graphQLErrors[0].message);\n    }\n  };\n\n  const { email, password } = inputs;\n\n  return (\n    \n      <Form onSubmit={handleSubmitSignIn}>\n        <Form.Group>\n        <Form.Label>E-Mail</Form.Label>\n          <Form.Control name=\"email\" type=\"text\" value={email} placeholder=\"email\" onChange={handleChange} />\n        </Form.Group>\n    \n        <Form.Group controlId=\"formBasicPassword\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control type=\"password\" name=\"password\" value={password} placeholder=\"password\" onChange={handleChange}/>\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Sign In\n        </Button>\n      </Form>\n   \n  );\n};\n\nSignIn.propTypes = {\n  history: PropTypes.object.isRequired,\n  refetch: PropTypes.func.isRequired,\n};\n\nexport default withRouter(SignIn);","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport SignUp from './Auth/SignUp';\nimport SignIn from './Auth/SignIn';\nimport {Row, Container } from 'react-bootstrap';\n\nconst AuthLayout = ({ refetch }) => {\n  return (\n    <>\n    <Container>\n      <Row className=\"justify-content-between gap-10 align-items-center vh-100\">\n        <SignIn refetch={refetch} />\n        <SignUp refetch={refetch}/>\n      </Row>\n    </Container>\n    \n    </>\n  );\n};\n\nAuthLayout.propTypes = {\n  refetch: PropTypes.func.isRequired,\n};\n\nexport default AuthLayout;","export const Checkbox = ({ type = 'checkbox', name, checked = false, onChange }) => {\n  return (<input type={type} name={name} checked={checked} onChange={onChange} /> )\n}","import React, { useEffect, useState } from 'react'\n\nimport { Button, ButtonGroup, Container, Row, Table  } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { BLOCK_USERS, DELETE_USERS, UNBLOCK_USERS } from '../utils/graphql';\nimport useCheckbox from '../hooks/useCheckbox';\nimport { Checkbox } from './Checkbox';\nimport { useStore } from '../store/store';\n\nfunction conversionDate(data) {\n  let date = new Date(+data);\n  date = date.toString().split(' ')\n  return `${date[2]} ${date[1]} ${date[3]} ${date[4]}`;\n}\n\nfunction keyId(checkeds){\n  return Object.keys(Object.fromEntries(Object.entries(checkeds).filter(([key,value]) => {\n    return value !== false\n  })));\n}\n\nexport const TableUsers = ({data, refetchUser,refetchAllUsers}) => {\n    const [{ auth: {user: {id}} }] = useStore();\n    console.log(id);\n    const [users, setUsers] = useState([])\n\n    const {checkeds, handleChange, handleChangeAll, handleChangeNo} = useCheckbox(users)\n\n    const[deleteUsers,{ loading: loadingDelete, error: errorDelete}] = useMutation(DELETE_USERS)\n    \n    const[blockUsers,{ loading: loadingBlock, error: errorBlock}] = useMutation(BLOCK_USERS)\n    const[unBlockUsers,{ loading: loadingUnBlock, error: errorUnBlock}] = useMutation(UNBLOCK_USERS)\n    const handlerBlock = async() => {\n      try {\n        const blockId = keyId(checkeds);\n\n        await blockUsers({\n          variables:  {\n            usersIds:blockId,\n        },    \n        })\n        await refetchUser()\n        await refetchAllUsers()\n      }catch(e) {\n        console.log(e);\n      }\n    } \n\n    const handlerUnBlock = async() => {\n      try {\n        const unBlockId = keyId(checkeds);\n        \n        await unBlockUsers({\n          variables:  {\n            usersIds:unBlockId,\n        },    \n        })\n        await refetchUser()\n        await refetchAllUsers()\n      }catch(e) {\n        console.log(e);\n      }\n    }\n\n    const handlerDelete = async () => {\n      try {\n        const deleteId = keyId(checkeds)\n        if(deleteId.some(e=> e === id)){\n          window.localStorage.removeItem('token')\n        }\n\n        \n        await deleteUsers({\n          variables:  {\n            usersIds:deleteId,\n        },    \n        })\n        await refetchUser()\n        await refetchAllUsers()\n      }catch(e) {\n        console.log(e);\n      }\n    }    \n    \n    const handlerRefetch = async () => {\n      try{\n        await refetchAllUsers()\n        await refetchUser()\n      }catch(e){\n        console.log(e);\n      }\n    }\n    useEffect(async() => {\n        setUsers(data)\n        await refetchAllUsers()\n    }, [data])\n  \n\n    return (\n      <Container>\n      <Row className=\"justify-content-center\">\n        <ButtonGroup>\n          <Button onClick={handlerBlock}>Block</Button>\n          <Button onClick={handlerUnBlock}>UnBlock</Button>\n          <Button variant=\"danger\" onClick={handlerDelete}>Delete</Button>\n          <Button variant=\"success\" onClick={handlerRefetch}>UpdateUsers</Button>\n        </ButtonGroup>\n      </Row>\n      \n        <Table striped bordered hover >\n            <thead>\n              <tr>\n                <th>\n                <ButtonGroup size=\"sm\">\n                  <Button onClick={handleChangeAll}>\n                  All\n                  </Button>\n                  <Button onClick={handleChangeNo}>\n                  No\n                  </Button>\n                </ButtonGroup>\n                \n                </th>\n                <th>Id</th>\n                <th>Name</th>\n                <th>Email</th>\n                <th>Date</th>\n                <th>Last Login</th>\n                <th>Online Offline</th>\n                <th>Status Block</th>\n              </tr>\n            </thead>\n            <tbody>\n            {users.map((u, i)=> {\n            return (\n                <tr key={u.id}>\n                  <td>\n                  <Checkbox name={u.id} checked={checkeds[u.id]} onChange={handleChange} />\n                  </td>\n                  <td>{u.id}</td>\n                  <td>{u.name}</td>\n                  <td>{u.email}</td>\n                  <td>{conversionDate(u.createdAt)}</td>\n                  <td>{conversionDate(u.lastLoginAt)}</td>\n                  <td>{u.isOnline === true ? 'Online' : 'Offline'}</td>\n                  <td>{u.active === true ? 'Not Blocked' : 'Blocked'}</td>\n                </tr>\n            )\n            })\n            }\n        </tbody>\n        </Table>\n        </Container>\n    )\n}\n\n\n","import { useEffect, useState } from \"react\";\n\nexport default function useCheckbox(initial = []) {\n\nconst [checkeds, setChecked] = useState({})\n  \n  useEffect(() => {\n    setChecked(() => {\n      return Object.assign({},...initial.map((user, i)=> {\n        return {\n           [user.id]:  false\n          \n        }\n      })\n    )})\n  }, [initial])\n\n  function handleChange(e) {\n    let {name, checked} = e.target;\n    \n    setChecked({\n      ...checkeds,[name]: checked\n    })\n  }\n\n  function handler(boolean){\n    const change = Object.fromEntries(Object.entries(checkeds).map(([key, value]) => [key, boolean]))\n    setChecked(change) \n  }\n  function handleChangeAll(){\n    handler(true)\n  }\n\n  function handleChangeNo(){\n    handler(false)\n  }\n  return {\n    checkeds,\n    handleChange,\n    handleChangeAll,\n    handleChangeNo\n  }\n}\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, withRouter } from 'react-router-dom';\nimport { useStore } from '../store/store';\nimport { SET_AUTH_USER } from '../store/auth';\nimport { TableUsers } from '../components/Table';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { GET_ALL_USERS, LOG_OUT } from '../utils/graphql';\nimport { Button, Container } from 'react-bootstrap';\n\nconst AppLayout = ({ location, authUser, refetch:refetchUser }) => {\n  const [{ auth }, dispatch] = useStore();\n\n\n  useEffect(() => {\n    dispatch({ type: SET_AUTH_USER, payload: authUser });\n  }, [dispatch, authUser]);\n\n  const {data, loading, error, refetch: refetchAllUsers} = useQuery(GET_ALL_USERS)\n\n  const users = data ? data?.allUsers : [];\n  const userId = auth?.user?.id;\n  const [logout, {loading: loadingLogout}] = useMutation(LOG_OUT)\n\n  const handlerLogOut = async () => {\n    window.localStorage.removeItem('token');\n    await logout({\n      variables: {\n        userId\n      }\n    })\n    await refetchUser()\n  }\n\n  if (!auth.user) return null;\n  if(loading) return (<div>Loading...</div>)\n\n  return (\n    <Container className=\"vh-100\">\n    <Button variant=\"danger\" onClick={handlerLogOut}>Log Out</Button>\n    {data && <TableUsers data={users} refetchUser={refetchUser} loadingAllUsers={loading} refetchAllUsers={refetchAllUsers}/>}\n    </Container>\n  );\n};\n\nAppLayout.propTypes = {\n  location: PropTypes.object.isRequired,\n  authUser: PropTypes.object.isRequired,\n};\n\nexport default withRouter(AppLayout);","import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport { GET_AUTH_USER } from './utils/graphql';\n\nimport AuthLayout from './pages/AuthLayout';\nimport AppLayout  from './pages/AppLayout';\n\nconst App = () => {\n\n  const { loading, data, error, refetch } = useQuery(GET_AUTH_USER);\n\n  if (loading) return (<div>Loading...</div>);\n  if (error) {\n    return <div>{error}</div>;\n  }\n\n  return (\n    <Router>\n        <Switch>\n          {data.getAuthUser ? (\n            <Route exact render={() => <AppLayout authUser={data.getAuthUser} refetch={refetch} />} />\n          ) : (\n            <Route exact render={() => <AuthLayout refetch={refetch} />} />\n          )}\n        </Switch>\n    </Router>\n  );\n};\n\nexport default App;","import React from 'react';\nimport { render } from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { createApolloClient } from './utils/apollo-client';\nimport { StoreProvider } from './store/store';\nimport {endpoint} from './config';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './App';\n\nconst api_url = endpoint;\nconst websocketApiUrl = endpoint.replace('http://', 'ws://');\n\nconst apolloClient = createApolloClient(api_url, websocketApiUrl);\n\nrender(\n  <ApolloProvider client={apolloClient}>\n      <StoreProvider>\n        <App />\n      </StoreProvider>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}